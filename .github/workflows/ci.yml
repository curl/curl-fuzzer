name: CI
'on':
  push:
    branches:
      - master
      - main
      - '*/ci'
  pull_request:
    branches:
      - master
      - main
  # This makes the workflow callable by curl/curl
  workflow_call: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  DetermineMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: curl/curl-fuzzer
      - name: Set matrix
        id: set-matrix
        run: |
          . ./scripts/fuzz_targets
          python3 -m generate_matrix | tee $GITHUB_OUTPUT

  BuildFuzzers:
    runs-on: ubuntu-latest
    steps:
    # Use the CIFuzz job to test the repository.
    - name: Build Fuzzers
      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master
      with:
        oss-fuzz-project-name: 'curl'
        dry-run: false
        keep-unaffected-fuzz-targets: true

    # Archive the fuzzer output (which maintains permissions)
    - name: Create fuzz tar
      run: tar cvf fuzz.tar build-out/

    # Upload the fuzzer output
    - name: Archive fuzz tar
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: fuzz_tar
        path: fuzz.tar

  RunFuzzers:
    needs: [ BuildFuzzers, DetermineMatrix ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.DetermineMatrix.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: fuzz_tar
      - name: Unpack fuzzer ${{ matrix.fuzzer }}
        run: tar xvf fuzz.tar build-out/${{ matrix.fuzzer }} build-out/${{ matrix.fuzzer }}_seed_corpus.zip
      - name: Display extracted files
        run: ls -laR build-out/
      - name: Run Fuzzer ${{ matrix.fuzzer }}
        uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master
        with:
          oss-fuzz-project-name: 'curl'
          fuzz-seconds: 120
          dry-run: false
      - name: Upload Crash
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure()
        with:
          name: artifacts
          path: ./out/artifacts

  Mainline:
    strategy:
      matrix:
        sanitizer:
          - address
          - memory

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: curl/curl-fuzzer
      - name: Install Dependencies
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get -o Dpkg::Use-Pty=0 update
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get -o Dpkg::Use-Pty=0 install -y cmake clang ninja-build
      - name: Compile mainline
        env:
          # test with different "sanitizers"
          SANITIZER: ${{ matrix.sanitizer }}
        run: ./mainline.sh

  just_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: curl/curl-fuzzer
      - name: Install Dependencies
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get -o Dpkg::Use-Pty=0 update
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get -o Dpkg::Use-Pty=0 install -y cmake clang ninja-build
      - name: Compile deps target
        run: ./scripts/compile_target.sh deps

  # Ensure that the repository can be built for i386
  Testi386:
    runs-on: ubuntu-latest
    steps:
    - name: Build Fuzzers
      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master
      with:
        oss-fuzz-project-name: 'curl'
        dry-run: false
        keep-unaffected-fuzz-targets: true
        architecture: 'i386'
