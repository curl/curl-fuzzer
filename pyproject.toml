[project]
name = "curl-fuzzer-tools"
version = "0.1.0"
description = "Tooling for the curl-fuzzer repository"
maintainers = [
    {name = "Max Dymond",email = "cmeister2@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.9,<4"
dependencies = [
    "scapy (>=2.6.1,<3.0.0)"
]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
mypy = "1.15.0"
ruff = "0.9.10"

[project.scripts]
read_corpus = "curl_fuzzer_tools.read_corpus:run"
generate_corpus = "curl_fuzzer_tools.generate_corpus:run"
corpus_to_pcap = "curl_fuzzer_tools.corpus_to_pcap:run"

[tool.mypy]
warn_unused_configs = true
disallow_untyped_defs = true
warn_return_any = true

[tool.ruff]
exclude = [
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".git"
]

# Match black
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
extend-select = [
    "D"   # pydocstyle
]

ignore = [
    "D400",
    "D401",
    "D415"
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
